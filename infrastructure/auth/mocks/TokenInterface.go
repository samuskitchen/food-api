// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	jwt "github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"

	model "food-api/infrastructure/auth/model"
)

// TokenInterface is an autogenerated mock type for the TokenInterface type
type TokenInterface struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: userid
func (_m *TokenInterface) CreateToken(userid string) (*model.TokenDetails, error) {
	ret := _m.Called(userid)

	var r0 *model.TokenDetails
	if rf, ok := ret.Get(0).(func(string) *model.TokenDetails); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractTokenMetadata provides a mock function with given fields: _a0
func (_m *TokenInterface) ExtractTokenMetadata(_a0 *http.Request) (*model.AccessDetails, error) {
	ret := _m.Called(_a0)

	var r0 *model.AccessDetails
	if rf, ok := ret.Get(0).(func(*http.Request) *model.AccessDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAndValidateRefreshToken provides a mock function with given fields: refreshToken
func (_m *TokenInterface) VerifyAndValidateRefreshToken(refreshToken string) (*jwt.Token, error) {
	ret := _m.Called(refreshToken)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
